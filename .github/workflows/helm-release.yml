name: Helm Chart CI/CD

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
    paths:
      - 'Chart.yaml'
      - 'values.yaml'
      - 'templates/**'
  workflow_dispatch:

jobs:
  # 验证作业 - 对所有推送运行lint和template
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.1'

    - name: Lint Helm Chart
      run: |
        helm lint .

    - name: Render Template
      run: |
        helm template . --debug

  # 发布作业 - 仅在标签推送时执行
  release:
    runs-on: ubuntu-latest
    # 仅在标签推送时运行此作业
    if: startsWith(github.ref, 'refs/tags/v')
    needs: validate
    permissions:
      contents: write  # 用于发布到GitHub Pages
      packages: write  # 用于发布到GHCR
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Helm
      uses: azure/setup-helm@v4
      with:
        version: '3.12.1'

    - name: Get Chart Info
      id: chart
      run: |
        CHART_NAME=$(yq '.name' Chart.yaml)
        CHART_VERSION=$(yq '.version' Chart.yaml)
        echo "name=$CHART_NAME" >> $GITHUB_OUTPUT
        echo "version=$CHART_VERSION" >> $GITHUB_OUTPUT

    - name: Package Helm Chart
      run: |
        helm package .

    # 1. 发布到GitHub Pages (兼容传统Helm仓库)
    - name: Setup GitHub Pages
      run: |
        # 确保docs目录存在
        mkdir -p docs
        
        # 如果不存在index.yaml，则创建一个
        if [ ! -f docs/index.yaml ]; then
          helm repo index docs/ --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}
        fi
        
        # 移动打包好的chart到docs目录
        mv ${{ steps.chart.outputs.name }}-${{ steps.chart.outputs.version }}.tgz docs/
        
        # 更新index.yaml
        helm repo index docs/ --url https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }} --merge docs/index.yaml

    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: docs
        branch: gh-pages
        
    # 2. 发布到GHCR (OCI格式)
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Push Helm Chart to GHCR
      run: |
        echo "Publishing Helm chart ${{ steps.chart.outputs.name }}:${{ steps.chart.outputs.version }} to GHCR"
        
        # 推送版本标签
        helm push ${{ steps.chart.outputs.name }}-${{ steps.chart.outputs.version }}.tgz oci://ghcr.io/${{ github.repository_owner }}/helm-charts
        
        # 额外推送latest标签
        echo "Tagging and pushing as latest"
        CHART_FILENAME="${{ steps.chart.outputs.name }}-${{ steps.chart.outputs.version }}.tgz"
        LATEST_FILENAME="${{ steps.chart.outputs.name }}-latest.tgz"
        cp "$CHART_FILENAME" "$LATEST_FILENAME"
        helm push "$LATEST_FILENAME" oci://ghcr.io/${{ github.repository_owner }}/helm-charts

    - name: Output Repository Info
      run: |
        echo "Chart has been published to GHCR and GitHub Pages"
        echo ""
        echo "GHCR (OCI) Usage:"
        echo "1. 安装/获取特定版本:"
        echo "   helm install my-release oci://ghcr.io/${{ github.repository_owner }}/helm-charts/${{ steps.chart.outputs.name }} --version ${{ steps.chart.outputs.version }}"
        echo "   helm pull oci://ghcr.io/${{ github.repository_owner }}/helm-charts/${{ steps.chart.outputs.name }} --version ${{ steps.chart.outputs.version }}"
        echo ""
        echo "2. 使用latest标签:"
        echo "   helm install my-release oci://ghcr.io/${{ github.repository_owner }}/helm-charts/${{ steps.chart.outputs.name }} --version latest"
        echo "   helm pull oci://ghcr.io/${{ github.repository_owner }}/helm-charts/${{ steps.chart.outputs.name }} --version latest"
        echo ""
        echo "GitHub Pages (传统Helm仓库) Usage:"
        echo "1. 添加Helm仓库:"
        echo "   helm repo add ${{ steps.chart.outputs.name }} https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        echo "2. 安装chart:"
        echo "   helm install my-release ${{ steps.chart.outputs.name }}/${{ steps.chart.outputs.name }} --version ${{ steps.chart.outputs.version }}"